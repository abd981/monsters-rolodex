{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","className","type","placeholder","onChange","handleChange","Card","src","monster","id","alt","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","el","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,MAAY,SAACC,GACtB,OACI,uBACIC,UAAU,SACVC,KAAK,SACLC,YAAaH,EAAMG,YACnBC,SAAUJ,EAAMK,iBCNfC,G,YAAO,SAACN,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKM,IAAG,+BAA0BP,EAAMQ,QAAQC,GAAxC,aAAuDC,IAAKV,EAAMQ,QAAQG,OAClF,6BAAKX,EAAMQ,QAAQG,OACnB,4BAAIX,EAAMQ,QAAQI,aCJjBC,EAAW,SAACb,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMc,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UC+B/CO,G,wDAhCb,aAAc,IAAD,8BACX,gBAcFX,aAAe,SAACY,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXR,SAAS,GACTK,YAAY,IALH,E,gEASO,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAASa,S,+BAOjC,IAAD,EACyBC,KAAKN,MAA9BR,EADA,EACAA,SAAUK,EADV,EACUA,YACXU,EAAmBf,EAASgB,QAAO,SAAAC,GAAE,OAAIA,EAAGpB,KAAKqB,cAAcC,SAASd,EAAYa,kBAC1F,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWE,YAAY,iBAAiBE,aAAcuB,KAAKvB,eAC3D,cAAC,EAAD,CAAUS,SAAUe,W,GA3BVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8ed6d583.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props)=>{\r\n    return (\r\n        <input\r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={props.placeholder}\r\n            onChange={props.handleChange}\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props)=>{\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt={props.monster.name}/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component.jsx';\r\n\r\nexport const CardList = (props)=>{\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters:[],\n      searchField:''\n    };\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({monsters:users}));\n  }\n\n  handleChange = (e)=>{\n    this.setState({searchField:e.target.value})\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(el => el.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters rolodex</h1>\n        <SearchBox placeholder=\"Search Monster\" handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}